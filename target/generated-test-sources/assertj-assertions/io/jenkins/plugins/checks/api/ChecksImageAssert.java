package io.jenkins.plugins.checks.api;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * {@link ChecksImage} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class ChecksImageAssert extends AbstractObjectAssert<ChecksImageAssert, ChecksImage> {

  /**
   * Creates a new <code>{@link ChecksImageAssert}</code> to make assertions on actual ChecksImage.
   * @param actual the ChecksImage we want to make assertions on.
   */
  public ChecksImageAssert(ChecksImage actual) {
    super(actual, ChecksImageAssert.class);
  }

  /**
   * An entry point for ChecksImageAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myChecksImage)</code> and get specific assertion with code completion.
   * @param actual the ChecksImage we want to make assertions on.
   * @return a new <code>{@link ChecksImageAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static ChecksImageAssert assertThat(ChecksImage actual) {
    return new ChecksImageAssert(actual);
  }

  /**
   * Verifies that the actual ChecksImage's alt is equal to the given one.
   * @param alt the given alt to compare the actual ChecksImage's alt to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ChecksImage's alt is not equal to the given one.
   */
  public ChecksImageAssert hasAlt(java.util.Optional alt) {
    // check that actual ChecksImage we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting alt of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Optional actualAlt = actual.getAlt();
    if (!Objects.areEqual(actualAlt, alt)) {
      failWithMessage(assertjErrorMessage, actual, alt, actualAlt);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksImage's caption is equal to the given one.
   * @param caption the given caption to compare the actual ChecksImage's caption to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ChecksImage's caption is not equal to the given one.
   */
  public ChecksImageAssert hasCaption(java.util.Optional caption) {
    // check that actual ChecksImage we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting caption of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Optional actualCaption = actual.getCaption();
    if (!Objects.areEqual(actualCaption, caption)) {
      failWithMessage(assertjErrorMessage, actual, caption, actualCaption);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksImage's imageUrl is equal to the given one.
   * @param imageUrl the given imageUrl to compare the actual ChecksImage's imageUrl to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ChecksImage's imageUrl is not equal to the given one.
   */
  public ChecksImageAssert hasImageUrl(java.util.Optional imageUrl) {
    // check that actual ChecksImage we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting imageUrl of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Optional actualImageUrl = actual.getImageUrl();
    if (!Objects.areEqual(actualImageUrl, imageUrl)) {
      failWithMessage(assertjErrorMessage, actual, imageUrl, actualImageUrl);
    }

    // return the current assertion for method chaining
    return this;
  }

}
