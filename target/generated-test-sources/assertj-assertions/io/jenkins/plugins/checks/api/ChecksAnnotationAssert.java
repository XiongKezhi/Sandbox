package io.jenkins.plugins.checks.api;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * {@link ChecksAnnotation} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class ChecksAnnotationAssert extends AbstractObjectAssert<ChecksAnnotationAssert, ChecksAnnotation> {

  /**
   * Creates a new <code>{@link ChecksAnnotationAssert}</code> to make assertions on actual ChecksAnnotation.
   * @param actual the ChecksAnnotation we want to make assertions on.
   */
  public ChecksAnnotationAssert(ChecksAnnotation actual) {
    super(actual, ChecksAnnotationAssert.class);
  }

  /**
   * An entry point for ChecksAnnotationAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myChecksAnnotation)</code> and get specific assertion with code completion.
   * @param actual the ChecksAnnotation we want to make assertions on.
   * @return a new <code>{@link ChecksAnnotationAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static ChecksAnnotationAssert assertThat(ChecksAnnotation actual) {
    return new ChecksAnnotationAssert(actual);
  }

  /**
   * Verifies that the actual ChecksAnnotation's annotationLevel is equal to the given one.
   * @param annotationLevel the given annotationLevel to compare the actual ChecksAnnotation's annotationLevel to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ChecksAnnotation's annotationLevel is not equal to the given one.
   */
  public ChecksAnnotationAssert hasAnnotationLevel(ChecksAnnotation.ChecksAnnotationLevel annotationLevel) {
    // check that actual ChecksAnnotation we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting annotationLevel of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    ChecksAnnotation.ChecksAnnotationLevel actualAnnotationLevel = actual.getAnnotationLevel();
    if (!Objects.areEqual(actualAnnotationLevel, annotationLevel)) {
      failWithMessage(assertjErrorMessage, actual, annotationLevel, actualAnnotationLevel);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksAnnotation's endColumn is equal to the given one.
   * @param endColumn the given endColumn to compare the actual ChecksAnnotation's endColumn to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ChecksAnnotation's endColumn is not equal to the given one.
   */
  public ChecksAnnotationAssert hasEndColumn(java.util.Optional endColumn) {
    // check that actual ChecksAnnotation we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting endColumn of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Optional actualEndColumn = actual.getEndColumn();
    if (!Objects.areEqual(actualEndColumn, endColumn)) {
      failWithMessage(assertjErrorMessage, actual, endColumn, actualEndColumn);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksAnnotation's endLine is equal to the given one.
   * @param endLine the given endLine to compare the actual ChecksAnnotation's endLine to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ChecksAnnotation's endLine is not equal to the given one.
   */
  public ChecksAnnotationAssert hasEndLine(java.util.Optional endLine) {
    // check that actual ChecksAnnotation we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting endLine of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Optional actualEndLine = actual.getEndLine();
    if (!Objects.areEqual(actualEndLine, endLine)) {
      failWithMessage(assertjErrorMessage, actual, endLine, actualEndLine);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksAnnotation's message is equal to the given one.
   * @param message the given message to compare the actual ChecksAnnotation's message to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ChecksAnnotation's message is not equal to the given one.
   */
  public ChecksAnnotationAssert hasMessage(java.util.Optional message) {
    // check that actual ChecksAnnotation we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting message of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Optional actualMessage = actual.getMessage();
    if (!Objects.areEqual(actualMessage, message)) {
      failWithMessage(assertjErrorMessage, actual, message, actualMessage);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksAnnotation's path is equal to the given one.
   * @param path the given path to compare the actual ChecksAnnotation's path to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ChecksAnnotation's path is not equal to the given one.
   */
  public ChecksAnnotationAssert hasPath(java.util.Optional path) {
    // check that actual ChecksAnnotation we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting path of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Optional actualPath = actual.getPath();
    if (!Objects.areEqual(actualPath, path)) {
      failWithMessage(assertjErrorMessage, actual, path, actualPath);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksAnnotation's rawDetails is equal to the given one.
   * @param rawDetails the given rawDetails to compare the actual ChecksAnnotation's rawDetails to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ChecksAnnotation's rawDetails is not equal to the given one.
   */
  public ChecksAnnotationAssert hasRawDetails(java.util.Optional rawDetails) {
    // check that actual ChecksAnnotation we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting rawDetails of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Optional actualRawDetails = actual.getRawDetails();
    if (!Objects.areEqual(actualRawDetails, rawDetails)) {
      failWithMessage(assertjErrorMessage, actual, rawDetails, actualRawDetails);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksAnnotation's startColumn is equal to the given one.
   * @param startColumn the given startColumn to compare the actual ChecksAnnotation's startColumn to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ChecksAnnotation's startColumn is not equal to the given one.
   */
  public ChecksAnnotationAssert hasStartColumn(java.util.Optional startColumn) {
    // check that actual ChecksAnnotation we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting startColumn of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Optional actualStartColumn = actual.getStartColumn();
    if (!Objects.areEqual(actualStartColumn, startColumn)) {
      failWithMessage(assertjErrorMessage, actual, startColumn, actualStartColumn);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksAnnotation's startLine is equal to the given one.
   * @param startLine the given startLine to compare the actual ChecksAnnotation's startLine to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ChecksAnnotation's startLine is not equal to the given one.
   */
  public ChecksAnnotationAssert hasStartLine(java.util.Optional startLine) {
    // check that actual ChecksAnnotation we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting startLine of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Optional actualStartLine = actual.getStartLine();
    if (!Objects.areEqual(actualStartLine, startLine)) {
      failWithMessage(assertjErrorMessage, actual, startLine, actualStartLine);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksAnnotation's title is equal to the given one.
   * @param title the given title to compare the actual ChecksAnnotation's title to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ChecksAnnotation's title is not equal to the given one.
   */
  public ChecksAnnotationAssert hasTitle(java.util.Optional title) {
    // check that actual ChecksAnnotation we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Optional actualTitle = actual.getTitle();
    if (!Objects.areEqual(actualTitle, title)) {
      failWithMessage(assertjErrorMessage, actual, title, actualTitle);
    }

    // return the current assertion for method chaining
    return this;
  }

}
