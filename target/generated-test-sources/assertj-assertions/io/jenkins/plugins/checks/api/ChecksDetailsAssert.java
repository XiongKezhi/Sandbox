package io.jenkins.plugins.checks.api;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link ChecksDetails} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class ChecksDetailsAssert extends AbstractObjectAssert<ChecksDetailsAssert, ChecksDetails> {

  /**
   * Creates a new <code>{@link ChecksDetailsAssert}</code> to make assertions on actual ChecksDetails.
   * @param actual the ChecksDetails we want to make assertions on.
   */
  public ChecksDetailsAssert(ChecksDetails actual) {
    super(actual, ChecksDetailsAssert.class);
  }

  /**
   * An entry point for ChecksDetailsAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myChecksDetails)</code> and get specific assertion with code completion.
   * @param actual the ChecksDetails we want to make assertions on.
   * @return a new <code>{@link ChecksDetailsAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static ChecksDetailsAssert assertThat(ChecksDetails actual) {
    return new ChecksDetailsAssert(actual);
  }

  /**
   * Verifies that the actual ChecksDetails's actions contains the given ChecksAction elements.
   * @param actions the given elements that should be contained in actual ChecksDetails's actions.
   * @return this assertion object.
   * @throws AssertionError if the actual ChecksDetails's actions does not contain all given ChecksAction elements.
   */
  public ChecksDetailsAssert hasActions(ChecksAction... actions) {
    // check that actual ChecksDetails we want to make assertions on is not null.
    isNotNull();

    // check that given ChecksAction varargs is not null.
    if (actions == null) failWithMessage("Expecting actions parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getActions(), actions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksDetails's actions contains the given ChecksAction elements in Collection.
   * @param actions the given elements that should be contained in actual ChecksDetails's actions.
   * @return this assertion object.
   * @throws AssertionError if the actual ChecksDetails's actions does not contain all given ChecksAction elements.
   */
  public ChecksDetailsAssert hasActions(java.util.Collection<? extends ChecksAction> actions) {
    // check that actual ChecksDetails we want to make assertions on is not null.
    isNotNull();

    // check that given ChecksAction collection is not null.
    if (actions == null) {
      failWithMessage("Expecting actions parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getActions(), actions.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksDetails's actions contains <b>only</b> the given ChecksAction elements and nothing else in whatever order.
   * @param actions the given elements that should be contained in actual ChecksDetails's actions.
   * @return this assertion object.
   * @throws AssertionError if the actual ChecksDetails's actions does not contain all given ChecksAction elements.
   */
  public ChecksDetailsAssert hasOnlyActions(ChecksAction... actions) {
    // check that actual ChecksDetails we want to make assertions on is not null.
    isNotNull();

    // check that given ChecksAction varargs is not null.
    if (actions == null) failWithMessage("Expecting actions parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getActions(), actions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksDetails's actions contains <b>only</b> the given ChecksAction elements in Collection and nothing else in whatever order.
   * @param actions the given elements that should be contained in actual ChecksDetails's actions.
   * @return this assertion object.
   * @throws AssertionError if the actual ChecksDetails's actions does not contain all given ChecksAction elements.
   */
  public ChecksDetailsAssert hasOnlyActions(java.util.Collection<? extends ChecksAction> actions) {
    // check that actual ChecksDetails we want to make assertions on is not null.
    isNotNull();

    // check that given ChecksAction collection is not null.
    if (actions == null) {
      failWithMessage("Expecting actions parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getActions(), actions.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksDetails's actions does not contain the given ChecksAction elements.
   *
   * @param actions the given elements that should not be in actual ChecksDetails's actions.
   * @return this assertion object.
   * @throws AssertionError if the actual ChecksDetails's actions contains any given ChecksAction elements.
   */
  public ChecksDetailsAssert doesNotHaveActions(ChecksAction... actions) {
    // check that actual ChecksDetails we want to make assertions on is not null.
    isNotNull();

    // check that given ChecksAction varargs is not null.
    if (actions == null) failWithMessage("Expecting actions parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getActions(), actions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksDetails's actions does not contain the given ChecksAction elements in Collection.
   *
   * @param actions the given elements that should not be in actual ChecksDetails's actions.
   * @return this assertion object.
   * @throws AssertionError if the actual ChecksDetails's actions contains any given ChecksAction elements.
   */
  public ChecksDetailsAssert doesNotHaveActions(java.util.Collection<? extends ChecksAction> actions) {
    // check that actual ChecksDetails we want to make assertions on is not null.
    isNotNull();

    // check that given ChecksAction collection is not null.
    if (actions == null) {
      failWithMessage("Expecting actions parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getActions(), actions.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksDetails has no actions.
   * @return this assertion object.
   * @throws AssertionError if the actual ChecksDetails's actions is not empty.
   */
  public ChecksDetailsAssert hasNoActions() {
    // check that actual ChecksDetails we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have actions but had :\n  <%s>";

    // check
    if (actual.getActions().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getActions());
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual ChecksDetails's completedAt is equal to the given one.
   * @param completedAt the given completedAt to compare the actual ChecksDetails's completedAt to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ChecksDetails's completedAt is not equal to the given one.
   */
  public ChecksDetailsAssert hasCompletedAt(java.util.Optional completedAt) {
    // check that actual ChecksDetails we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting completedAt of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Optional actualCompletedAt = actual.getCompletedAt();
    if (!Objects.areEqual(actualCompletedAt, completedAt)) {
      failWithMessage(assertjErrorMessage, actual, completedAt, actualCompletedAt);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksDetails's conclusion is equal to the given one.
   * @param conclusion the given conclusion to compare the actual ChecksDetails's conclusion to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ChecksDetails's conclusion is not equal to the given one.
   */
  public ChecksDetailsAssert hasConclusion(ChecksConclusion conclusion) {
    // check that actual ChecksDetails we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting conclusion of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    ChecksConclusion actualConclusion = actual.getConclusion();
    if (!Objects.areEqual(actualConclusion, conclusion)) {
      failWithMessage(assertjErrorMessage, actual, conclusion, actualConclusion);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksDetails's detailsURL is equal to the given one.
   * @param detailsURL the given detailsURL to compare the actual ChecksDetails's detailsURL to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ChecksDetails's detailsURL is not equal to the given one.
   */
  public ChecksDetailsAssert hasDetailsURL(java.util.Optional detailsURL) {
    // check that actual ChecksDetails we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting detailsURL of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Optional actualDetailsURL = actual.getDetailsURL();
    if (!Objects.areEqual(actualDetailsURL, detailsURL)) {
      failWithMessage(assertjErrorMessage, actual, detailsURL, actualDetailsURL);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksDetails's name is equal to the given one.
   * @param name the given name to compare the actual ChecksDetails's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ChecksDetails's name is not equal to the given one.
   */
  public ChecksDetailsAssert hasName(java.util.Optional name) {
    // check that actual ChecksDetails we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Optional actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksDetails's output is equal to the given one.
   * @param output the given output to compare the actual ChecksDetails's output to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ChecksDetails's output is not equal to the given one.
   */
  public ChecksDetailsAssert hasOutput(java.util.Optional output) {
    // check that actual ChecksDetails we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting output of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Optional actualOutput = actual.getOutput();
    if (!Objects.areEqual(actualOutput, output)) {
      failWithMessage(assertjErrorMessage, actual, output, actualOutput);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksDetails's startedAt is equal to the given one.
   * @param startedAt the given startedAt to compare the actual ChecksDetails's startedAt to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ChecksDetails's startedAt is not equal to the given one.
   */
  public ChecksDetailsAssert hasStartedAt(java.util.Optional startedAt) {
    // check that actual ChecksDetails we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting startedAt of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Optional actualStartedAt = actual.getStartedAt();
    if (!Objects.areEqual(actualStartedAt, startedAt)) {
      failWithMessage(assertjErrorMessage, actual, startedAt, actualStartedAt);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksDetails's status is equal to the given one.
   * @param status the given status to compare the actual ChecksDetails's status to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ChecksDetails's status is not equal to the given one.
   */
  public ChecksDetailsAssert hasStatus(ChecksStatus status) {
    // check that actual ChecksDetails we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting status of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    ChecksStatus actualStatus = actual.getStatus();
    if (!Objects.areEqual(actualStatus, status)) {
      failWithMessage(assertjErrorMessage, actual, status, actualStatus);
    }

    // return the current assertion for method chaining
    return this;
  }

}
