package io.jenkins.plugins.checks.api;

import org.assertj.core.api.AbstractComparableAssert;

/**
 * {@link ChecksAnnotation.ChecksAnnotationLevel} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class ChecksAnnotationChecksAnnotationLevelAssert extends AbstractComparableAssert<ChecksAnnotationChecksAnnotationLevelAssert, ChecksAnnotation.ChecksAnnotationLevel> {

  /**
   * Creates a new <code>{@link ChecksAnnotationChecksAnnotationLevelAssert}</code> to make assertions on actual ChecksAnnotation.ChecksAnnotationLevel.
   * @param actual the ChecksAnnotation.ChecksAnnotationLevel we want to make assertions on.
   */
  public ChecksAnnotationChecksAnnotationLevelAssert(ChecksAnnotation.ChecksAnnotationLevel actual) {
    super(actual, ChecksAnnotationChecksAnnotationLevelAssert.class);
  }

  /**
   * An entry point for ChecksAnnotationChecksAnnotationLevelAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myChecksAnnotation.ChecksAnnotationLevel)</code> and get specific assertion with code completion.
   * @param actual the ChecksAnnotation.ChecksAnnotationLevel we want to make assertions on.
   * @return a new <code>{@link ChecksAnnotationChecksAnnotationLevelAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static ChecksAnnotationChecksAnnotationLevelAssert assertThat(ChecksAnnotation.ChecksAnnotationLevel actual) {
    return new ChecksAnnotationChecksAnnotationLevelAssert(actual);
  }

}
