package io.jenkins.plugins.checks.api;

import org.assertj.core.api.AbstractObjectAssert;

/**
 * {@link ChecksAnnotation.ChecksAnnotationBuilder} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class ChecksAnnotationChecksAnnotationBuilderAssert extends AbstractObjectAssert<ChecksAnnotationChecksAnnotationBuilderAssert, ChecksAnnotation.ChecksAnnotationBuilder> {

  /**
   * Creates a new <code>{@link ChecksAnnotationChecksAnnotationBuilderAssert}</code> to make assertions on actual ChecksAnnotation.ChecksAnnotationBuilder.
   * @param actual the ChecksAnnotation.ChecksAnnotationBuilder we want to make assertions on.
   */
  public ChecksAnnotationChecksAnnotationBuilderAssert(ChecksAnnotation.ChecksAnnotationBuilder actual) {
    super(actual, ChecksAnnotationChecksAnnotationBuilderAssert.class);
  }

  /**
   * An entry point for ChecksAnnotationChecksAnnotationBuilderAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myChecksAnnotation.ChecksAnnotationBuilder)</code> and get specific assertion with code completion.
   * @param actual the ChecksAnnotation.ChecksAnnotationBuilder we want to make assertions on.
   * @return a new <code>{@link ChecksAnnotationChecksAnnotationBuilderAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static ChecksAnnotationChecksAnnotationBuilderAssert assertThat(ChecksAnnotation.ChecksAnnotationBuilder actual) {
    return new ChecksAnnotationChecksAnnotationBuilderAssert(actual);
  }

}
