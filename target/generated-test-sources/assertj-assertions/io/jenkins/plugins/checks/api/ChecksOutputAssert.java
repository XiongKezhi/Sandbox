package io.jenkins.plugins.checks.api;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link ChecksOutput} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class ChecksOutputAssert extends AbstractObjectAssert<ChecksOutputAssert, ChecksOutput> {

  /**
   * Creates a new <code>{@link ChecksOutputAssert}</code> to make assertions on actual ChecksOutput.
   * @param actual the ChecksOutput we want to make assertions on.
   */
  public ChecksOutputAssert(ChecksOutput actual) {
    super(actual, ChecksOutputAssert.class);
  }

  /**
   * An entry point for ChecksOutputAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myChecksOutput)</code> and get specific assertion with code completion.
   * @param actual the ChecksOutput we want to make assertions on.
   * @return a new <code>{@link ChecksOutputAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static ChecksOutputAssert assertThat(ChecksOutput actual) {
    return new ChecksOutputAssert(actual);
  }

  /**
   * Verifies that the actual ChecksOutput's checksAnnotations contains the given ChecksAnnotation elements.
   * @param checksAnnotations the given elements that should be contained in actual ChecksOutput's checksAnnotations.
   * @return this assertion object.
   * @throws AssertionError if the actual ChecksOutput's checksAnnotations does not contain all given ChecksAnnotation elements.
   */
  public ChecksOutputAssert hasChecksAnnotations(ChecksAnnotation... checksAnnotations) {
    // check that actual ChecksOutput we want to make assertions on is not null.
    isNotNull();

    // check that given ChecksAnnotation varargs is not null.
    if (checksAnnotations == null) failWithMessage("Expecting checksAnnotations parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getChecksAnnotations(), checksAnnotations);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksOutput's checksAnnotations contains the given ChecksAnnotation elements in Collection.
   * @param checksAnnotations the given elements that should be contained in actual ChecksOutput's checksAnnotations.
   * @return this assertion object.
   * @throws AssertionError if the actual ChecksOutput's checksAnnotations does not contain all given ChecksAnnotation elements.
   */
  public ChecksOutputAssert hasChecksAnnotations(java.util.Collection<? extends ChecksAnnotation> checksAnnotations) {
    // check that actual ChecksOutput we want to make assertions on is not null.
    isNotNull();

    // check that given ChecksAnnotation collection is not null.
    if (checksAnnotations == null) {
      failWithMessage("Expecting checksAnnotations parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getChecksAnnotations(), checksAnnotations.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksOutput's checksAnnotations contains <b>only</b> the given ChecksAnnotation elements and nothing else in whatever order.
   * @param checksAnnotations the given elements that should be contained in actual ChecksOutput's checksAnnotations.
   * @return this assertion object.
   * @throws AssertionError if the actual ChecksOutput's checksAnnotations does not contain all given ChecksAnnotation elements.
   */
  public ChecksOutputAssert hasOnlyChecksAnnotations(ChecksAnnotation... checksAnnotations) {
    // check that actual ChecksOutput we want to make assertions on is not null.
    isNotNull();

    // check that given ChecksAnnotation varargs is not null.
    if (checksAnnotations == null) failWithMessage("Expecting checksAnnotations parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getChecksAnnotations(), checksAnnotations);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksOutput's checksAnnotations contains <b>only</b> the given ChecksAnnotation elements in Collection and nothing else in whatever order.
   * @param checksAnnotations the given elements that should be contained in actual ChecksOutput's checksAnnotations.
   * @return this assertion object.
   * @throws AssertionError if the actual ChecksOutput's checksAnnotations does not contain all given ChecksAnnotation elements.
   */
  public ChecksOutputAssert hasOnlyChecksAnnotations(java.util.Collection<? extends ChecksAnnotation> checksAnnotations) {
    // check that actual ChecksOutput we want to make assertions on is not null.
    isNotNull();

    // check that given ChecksAnnotation collection is not null.
    if (checksAnnotations == null) {
      failWithMessage("Expecting checksAnnotations parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getChecksAnnotations(), checksAnnotations.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksOutput's checksAnnotations does not contain the given ChecksAnnotation elements.
   *
   * @param checksAnnotations the given elements that should not be in actual ChecksOutput's checksAnnotations.
   * @return this assertion object.
   * @throws AssertionError if the actual ChecksOutput's checksAnnotations contains any given ChecksAnnotation elements.
   */
  public ChecksOutputAssert doesNotHaveChecksAnnotations(ChecksAnnotation... checksAnnotations) {
    // check that actual ChecksOutput we want to make assertions on is not null.
    isNotNull();

    // check that given ChecksAnnotation varargs is not null.
    if (checksAnnotations == null) failWithMessage("Expecting checksAnnotations parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getChecksAnnotations(), checksAnnotations);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksOutput's checksAnnotations does not contain the given ChecksAnnotation elements in Collection.
   *
   * @param checksAnnotations the given elements that should not be in actual ChecksOutput's checksAnnotations.
   * @return this assertion object.
   * @throws AssertionError if the actual ChecksOutput's checksAnnotations contains any given ChecksAnnotation elements.
   */
  public ChecksOutputAssert doesNotHaveChecksAnnotations(java.util.Collection<? extends ChecksAnnotation> checksAnnotations) {
    // check that actual ChecksOutput we want to make assertions on is not null.
    isNotNull();

    // check that given ChecksAnnotation collection is not null.
    if (checksAnnotations == null) {
      failWithMessage("Expecting checksAnnotations parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getChecksAnnotations(), checksAnnotations.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksOutput has no checksAnnotations.
   * @return this assertion object.
   * @throws AssertionError if the actual ChecksOutput's checksAnnotations is not empty.
   */
  public ChecksOutputAssert hasNoChecksAnnotations() {
    // check that actual ChecksOutput we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have checksAnnotations but had :\n  <%s>";

    // check
    if (actual.getChecksAnnotations().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getChecksAnnotations());
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual ChecksOutput's checksImages contains the given ChecksImage elements.
   * @param checksImages the given elements that should be contained in actual ChecksOutput's checksImages.
   * @return this assertion object.
   * @throws AssertionError if the actual ChecksOutput's checksImages does not contain all given ChecksImage elements.
   */
  public ChecksOutputAssert hasChecksImages(ChecksImage... checksImages) {
    // check that actual ChecksOutput we want to make assertions on is not null.
    isNotNull();

    // check that given ChecksImage varargs is not null.
    if (checksImages == null) failWithMessage("Expecting checksImages parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getChecksImages(), checksImages);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksOutput's checksImages contains the given ChecksImage elements in Collection.
   * @param checksImages the given elements that should be contained in actual ChecksOutput's checksImages.
   * @return this assertion object.
   * @throws AssertionError if the actual ChecksOutput's checksImages does not contain all given ChecksImage elements.
   */
  public ChecksOutputAssert hasChecksImages(java.util.Collection<? extends ChecksImage> checksImages) {
    // check that actual ChecksOutput we want to make assertions on is not null.
    isNotNull();

    // check that given ChecksImage collection is not null.
    if (checksImages == null) {
      failWithMessage("Expecting checksImages parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getChecksImages(), checksImages.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksOutput's checksImages contains <b>only</b> the given ChecksImage elements and nothing else in whatever order.
   * @param checksImages the given elements that should be contained in actual ChecksOutput's checksImages.
   * @return this assertion object.
   * @throws AssertionError if the actual ChecksOutput's checksImages does not contain all given ChecksImage elements.
   */
  public ChecksOutputAssert hasOnlyChecksImages(ChecksImage... checksImages) {
    // check that actual ChecksOutput we want to make assertions on is not null.
    isNotNull();

    // check that given ChecksImage varargs is not null.
    if (checksImages == null) failWithMessage("Expecting checksImages parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getChecksImages(), checksImages);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksOutput's checksImages contains <b>only</b> the given ChecksImage elements in Collection and nothing else in whatever order.
   * @param checksImages the given elements that should be contained in actual ChecksOutput's checksImages.
   * @return this assertion object.
   * @throws AssertionError if the actual ChecksOutput's checksImages does not contain all given ChecksImage elements.
   */
  public ChecksOutputAssert hasOnlyChecksImages(java.util.Collection<? extends ChecksImage> checksImages) {
    // check that actual ChecksOutput we want to make assertions on is not null.
    isNotNull();

    // check that given ChecksImage collection is not null.
    if (checksImages == null) {
      failWithMessage("Expecting checksImages parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getChecksImages(), checksImages.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksOutput's checksImages does not contain the given ChecksImage elements.
   *
   * @param checksImages the given elements that should not be in actual ChecksOutput's checksImages.
   * @return this assertion object.
   * @throws AssertionError if the actual ChecksOutput's checksImages contains any given ChecksImage elements.
   */
  public ChecksOutputAssert doesNotHaveChecksImages(ChecksImage... checksImages) {
    // check that actual ChecksOutput we want to make assertions on is not null.
    isNotNull();

    // check that given ChecksImage varargs is not null.
    if (checksImages == null) failWithMessage("Expecting checksImages parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getChecksImages(), checksImages);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksOutput's checksImages does not contain the given ChecksImage elements in Collection.
   *
   * @param checksImages the given elements that should not be in actual ChecksOutput's checksImages.
   * @return this assertion object.
   * @throws AssertionError if the actual ChecksOutput's checksImages contains any given ChecksImage elements.
   */
  public ChecksOutputAssert doesNotHaveChecksImages(java.util.Collection<? extends ChecksImage> checksImages) {
    // check that actual ChecksOutput we want to make assertions on is not null.
    isNotNull();

    // check that given ChecksImage collection is not null.
    if (checksImages == null) {
      failWithMessage("Expecting checksImages parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getChecksImages(), checksImages.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksOutput has no checksImages.
   * @return this assertion object.
   * @throws AssertionError if the actual ChecksOutput's checksImages is not empty.
   */
  public ChecksOutputAssert hasNoChecksImages() {
    // check that actual ChecksOutput we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have checksImages but had :\n  <%s>";

    // check
    if (actual.getChecksImages().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getChecksImages());
    }

    // return the current assertion for method chaining
    return this;
  }


  /**
   * Verifies that the actual ChecksOutput's summary is equal to the given one.
   * @param summary the given summary to compare the actual ChecksOutput's summary to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ChecksOutput's summary is not equal to the given one.
   */
  public ChecksOutputAssert hasSummary(java.util.Optional summary) {
    // check that actual ChecksOutput we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting summary of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Optional actualSummary = actual.getSummary();
    if (!Objects.areEqual(actualSummary, summary)) {
      failWithMessage(assertjErrorMessage, actual, summary, actualSummary);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksOutput's text is equal to the given one.
   * @param text the given text to compare the actual ChecksOutput's text to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ChecksOutput's text is not equal to the given one.
   */
  public ChecksOutputAssert hasText(java.util.Optional text) {
    // check that actual ChecksOutput we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting text of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Optional actualText = actual.getText();
    if (!Objects.areEqual(actualText, text)) {
      failWithMessage(assertjErrorMessage, actual, text, actualText);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ChecksOutput's title is equal to the given one.
   * @param title the given title to compare the actual ChecksOutput's title to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ChecksOutput's title is not equal to the given one.
   */
  public ChecksOutputAssert hasTitle(java.util.Optional title) {
    // check that actual ChecksOutput we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Optional actualTitle = actual.getTitle();
    if (!Objects.areEqual(actualTitle, title)) {
      failWithMessage(assertjErrorMessage, actual, title, actualTitle);
    }

    // return the current assertion for method chaining
    return this;
  }

}
