package io.jenkins.plugins.checks.api;

import org.assertj.core.api.AbstractObjectAssert;

/**
 * {@link ChecksPublisherFactory} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class ChecksPublisherFactoryAssert extends AbstractObjectAssert<ChecksPublisherFactoryAssert, ChecksPublisherFactory> {

  /**
   * Creates a new <code>{@link ChecksPublisherFactoryAssert}</code> to make assertions on actual ChecksPublisherFactory.
   * @param actual the ChecksPublisherFactory we want to make assertions on.
   */
  public ChecksPublisherFactoryAssert(ChecksPublisherFactory actual) {
    super(actual, ChecksPublisherFactoryAssert.class);
  }

  /**
   * An entry point for ChecksPublisherFactoryAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myChecksPublisherFactory)</code> and get specific assertion with code completion.
   * @param actual the ChecksPublisherFactory we want to make assertions on.
   * @return a new <code>{@link ChecksPublisherFactoryAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static ChecksPublisherFactoryAssert assertThat(ChecksPublisherFactory actual) {
    return new ChecksPublisherFactoryAssert(actual);
  }

}
